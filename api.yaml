openapi: 3.0.0
info:
  title: Alkemy NODE API
  description: Documentacion API de aceleracion Alkemy con NODE
servers:
  - url: http://localhost:3000/
tags:
  - name: Users
    description: Operations about user
  - name: Category
    description: Operations about categories
  - name: Transactions
    description: Operations about transaction
paths:
  /user:
    get:
      tags:
        - Users
      summary: Finds all Users
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: true
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: All Users
                  body:
                    type: array
                    items:
                      $ref: "#/components/schemas/User"
    post:
      tags:
        - Users
      summary: Create new User
      requestBody:
        description: Create a new user
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        required: true
      responses:
        "201":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: true
                  code:
                    type: integer
                    example: 201
                  message:
                    type: string
                    example: Create User
                  body:
                    $ref: "#/components/schemas/User"
        "403":
          description: You don't have access!
        "405":
          description: Invalid input
  /user/{id}:
    get:
      tags:
        - Users
      summary: Finds User by id
      parameters:
        - name: id
          in: path
          description: ID of user to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: true
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: User \#1
                  body:
                    $ref: "#/components/schemas/User"
        "403":
          description: You don't have access!
        "404":
          description: The user doesn't exist!
    put:
      tags:
        - Users
      summary: Update User by id
      parameters:
        - name: id
          in: path
          description: ID of user to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update a user
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: true
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: User \#1
                  body:
                    $ref: "#/components/schemas/User"
        "403":
          description: You don't have access!
        "404":
          description: The user doesn't exist!
    delete:
      tags:
        - Users
      summary: Delete User by id
      parameters:
        - name: id
          in: path
          description: ID of user to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: true
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: User \#1
                  body:
                    $ref: "#/components/schemas/User"
        "403":
          description: You don't have access!
        "404":
          description: The user doesn't exist!
  /categories:
    get:
      tags:
        - Category
      summary: Finds all Categories
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: true
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: All Categories
                  body:
                    type: array
                    items:
                      $ref: "#/components/schemas/Category"
    post:
      tags:
        - Category
      summary: Create new Category
      requestBody:
        description: Create a new category
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Category"
        required: true
      responses:
        "201":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: true
                  code:
                    type: integer
                    example: 201
                  message:
                    type: string
                    example: Create Category
                  body:
                    $ref: "#/components/schemas/Category"
        "403":
          description: You don't have access!
        "405":
          description: Invalid input
  /categories/{id}:
    get:
      tags:
        - Category
      summary: Finds Category by id
      parameters:
        - name: id
          in: path
          description: ID of category to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: true
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Category \#1
                  body:
                    $ref: "#/components/schemas/Category"
        "403":
          description: You don't have access!
        "404":
          description: The category doesn't exist!
    put:
      tags:
        - Category
      summary: Update Category by id
      parameters:
        - name: id
          in: path
          description: ID of category to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update a category
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Category"
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: true
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Category \#1
                  body:
                    $ref: "#/components/schemas/Category"
        "403":
          description: You don't have access!
        "404":
          description: The category doesn't exist!
    delete:
      tags:
        - Category
      summary: Delete Category by id
      parameters:
        - name: id
          in: path
          description: ID of category to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: true
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Category \#1
                  body:
                    $ref: "#/components/schemas/Category"
        "403":
          description: You don't have access!
        "404":
          description: The category doesn't exist!
  /transactions:
    get:
      tags:
        - Transactions
      summary: Finds all Transactions
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: true
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: All Transactions
                  body:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          format: int64
                          example: 1
                        description:
                          type: string
                          example: Recarga
                        amount:
                          type: float
                          example: 123.13
                        date:
                          type: string
                          format: date-time
                        userId:
                          type: integer
                          format: int64
                          example: 10
                        categoryId:
                          type: integer
                          format: int64
                          example: 1
    post:
      tags:
        - Transactions
      summary: Make a new Transaction
      requestBody:
        description: Make a new transaction
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  format: int64
                  example: 1
                description:
                  type: string
                  example: Recarga
                amount:
                  type: float
                  example: 123.13
                date:
                  type: string
                  format: date-time
                userId:
                  type: integer
                  format: int64
                  example: 10
                categoryId:
                  type: integer
                  format: int64
                  example: 1
        required: true
      responses:
        "201":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: true
                  code:
                    type: integer
                    example: 201
                  message:
                    type: string
                    example: Create Transactions
                  body:
                    type: object
                    properties:
                      id:
                        type: integer
                        format: int64
                        example: 1
                      description:
                        type: string
                        example: Recarga
                      amount:
                        type: float
                        example: 123.13
                      date:
                        type: string
                        format: date-time
                      userId:
                        type: integer
                        format: int64
                        example: 10
                      categoryId:
                        type: integer
                        format: int64
                        example: 1
        "403":
          description: You don't have access!
        "405":
          description: Invalid input
  /transactions/{id}:
    get:
      tags:
        - Transactions
      summary: Finds Transactions by id
      parameters:
        - name: id
          in: path
          description: ID of transaction to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: true
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Transactions \#1
                  body:
                    required:
                      - description
                      - amount
                      - date
                      - userId
                      - categoryId
                    type: object
                    properties:
                      id:
                        type: integer
                        format: int64
                        example: 1
                      description:
                        type: string
                        example: Recarga
                      amount:
                        type: float
                        example: 123.13
                      date:
                        type: string
                        format: date-time
                      userId:
                        type: integer
                        format: int64
                        example: 10
                      categoryId:
                        type: integer
                        format: int64
                        example: 1
        "403":
          description: You don't have access!
        "404":
          description: The transaction doesn't exist!
    put:
      tags:
        - Transactions
      summary: Update Transaction by id
      parameters:
        - name: id
          in: path
          description: ID of transaction to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update a transaction
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  format: int64
                  example: 1
                description:
                  type: string
                  example: Recarga
                amount:
                  type: float
                  example: 123.13
                date:
                  type: string
                  format: date-time
                userId:
                  type: integer
                  format: int64
                  example: 10
                categoryId:
                  type: integer
                  format: int64
                  example: 1
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: true
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Transactions \#1
                  body:
                    required:
                      - description
                      - amount
                      - date
                      - userId
                      - categoryId
                    type: object
                    properties:
                      id:
                        type: integer
                        format: int64
                        example: 1
                      description:
                        type: string
                        example: Recarga
                      amount:
                        type: float
                        example: 123.13
                      date:
                        type: string
                        format: date-time
                      userId:
                        type: integer
                        format: int64
                        example: 10
                      categoryId:
                        type: integer
                        format: int64
                        example: 1
        "403":
          description: You don't have access!
        "404":
          description: The transaction doesn't exist!
    delete:
      tags:
        - Transactions
      summary: Delete Transactions by id
      parameters:
        - name: id
          in: path
          description: ID of transaction to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: true
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Transactions \#1
                  body:
                    required:
                      - description
                      - amount
                      - date
                      - userId
                      - categoryId
                    type: object
                    properties:
                      id:
                        type: integer
                        format: int64
                        example: 1
                      description:
                        type: string
                        example: Recarga
                      amount:
                        type: float
                        example: 123.13
                      date:
                        type: string
                        format: date-time
                      userId:
                        type: integer
                        format: int64
                        example: 10
                      categoryId:
                        type: integer
                        format: int64
                        example: 1
components:
  schemas:
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Incomes
        description:
          type: string
          example: Ingresos
      xml:
        name: category
    User:
      required:
        - firstName
        - lastName
        - email
        - password
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: "12345678"
        avatar:
          type: string
          example: "https://ichef.bbci.co.uk/news/640/cpsprodpb/DBB7/production/_122074265_hi071843849.jpg"
        role:
          $ref: "#/components/schemas/Role"
      xml:
        name: user
    Role:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: administrador
        description:
          type: string
          example: sos admin
      xml:
        name: role
    Transactions:
      required:
        - description
        - amount
        - date
        - user
        - category
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        description:
          type: string
          example: Recarga
        amount:
          type: float
          example: 123.13
        date:
          type: string
          format: date-time
        user:
          $ref: "#/components/schemas/User"
        category:
          $ref: "#/components/schemas/Category"
      xml:
        name: category
